fit99 <- lm(m99 ~ year_month,data=train_by_month)
fit100 <- lm(m100 ~ year_month,data=train_by_month)
fit200 <- lm(m200 ~ year_month,data=train_by_month)
fit300 <- lm(m300 ~ year_month,data=train_by_month)
test$strange_990000 <- predict(fit99,test)
test$strange_1000000 <- predict(fit100,test)
test$strange_2000000 <- predict(fit200,test)
test$strange_3000000 <- predict(fit300,test)
tt <- test %>% select(strange_990000,strange_1000000,strange_2000000,strange_3000000,year_month)
test_by_month <- tt %>% group_by(year_month) %>% summarize(m99 = mean(strange_990000),m100=mean(strange_1000000),m200=mean(strange_2000000),m300=mean(strange_3000000),n=n(),ev99=m99*n,ev100=m100*n,ev200=m200*n,ev300=m300*n)
# percentage of strange values in train set
perc_strange_test <- colSums(test_by_month[7:10])/7662
samplecoeffs <- perc_strange_test/perc_strange_train
train <- train %>% mutate(t99 = as.numeric(strange_990000))
outcomes <- train$t99
train <- select(train, -price_doc, -strange_990000, -strange_1000000, -strange_2000000, -strange_3000000, -year_month, -timestamp, -t99, -product_type)
test <- select(test,-strange_990000, -strange_1000000, -strange_2000000, -strange_3000000, -year_month, -timestamp)
dummy <- dummyVars(~.,train)
train_matrix <- predict(dummy,train)
train_matrix <- predict(dummy,train)
test_matrix <- predict(dummy,test)
train_sparse <- Matrix(train_matrix,sparse = T)
test_sparse <- Matrix(test_matrix,sparse = T)
dtrain <- xgb.DMatrix(data = train_sparse,label=outcomes)
dtest <- xgb.DMatrix(data=test_sparse)
weights <- vector(length=nrow(train))+0.005
weights[which(outcomes==1)] <- 1
dtrain <- xgb.DMatrix(data = train_sparse,label=outcomes, weight=weights)
dtest <- xgb.DMatrix(data=test_sparse)
dtest <- xgb.DMatrix(data=test_sparse)
param <- list(objective="binary:logistic",
eval_metric = "error",
eta = .2,
gamma = 1,
max_depth = 4,
min_child_weight = 1,
subsample = .7,
colsample_bytree = .7
)
xgb_cv <- xgb.cv(data = dtrain,
nfold = 5,
params = param,
nrounds = 150000,
maximize = FALSE,
prediction = TRUE,
print_every_n = 5,
early_stopping_round = 100,
weight = weights
);gc()
param <- list(objective="binary:logistic",
eval_metric = "auc",
eta = .2,
gamma = 1,
max_depth = 4,
min_child_weight = 1,
subsample = .7,
colsample_bytree = .7
)
xgb_cv <- xgb.cv(data = dtrain,
nfold = 5,
params = param,
nrounds = 150000,
maximize = FALSE,
prediction = TRUE,
print_every_n = 5,
early_stopping_round = 100,
weight = weights
);gc()
xgb_cv <- xgb.cv(data = dtrain,
nfold = 5,
params = param,
nrounds = 150000,
maximize = TRUE,
prediction = TRUE,
print_every_n = 5,
early_stopping_round = 100,
weight = weights
);gc()
str(train)
rounds <- xgb_cv$best_iteration
xgb_model <- xgb.train(data = dtrain,
params = param,
watchlist = list(train = dtrain),
nrounds = rounds,
verbose = 1,
print.every.n = 5
);gc()
preds <- predict(xgb_model,dtest)
head(sort(preds,decreasing=T))
hist(preds)
head(sort(preds,decreasing=T),20)
head(sort(preds,decreasing=T),20,40)
head(sort(preds,decreasing=T),200)
train <- train %>% mutate(t99 = as.numeric(strange_990000), t100=as.numeric(strange_1000000))
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(caret)
library(dplyr)
library(xgboost)
library(Matrix)
library(lubridate)
train <- read_csv('./input/train.csv')
test <- read_csv('./input/test.csv')
test_ids <- test$id
outcome <- "price_doc"
basic_features <- c(outcome,"timestamp","full_sq", "life_sq", "kitch_sq", "num_room", "floor", "max_floor", "material", "build_year", "state", "product_type", "sub_area")
train <- select(train, one_of(basic_features))
test <- select(test, one_of(basic_features))
## full area
train <- train %>% mutate(full_sq = ifelse((full_sq > 800 | full_sq <= 1), NA, full_sq))
test <- test %>% mutate(full_sq = ifelse((full_sq > 800 | full_sq <= 1), NA, full_sq))
## living area
train <- train %>% mutate(life_sq = ifelse(life_sq > 400 | life_sq <= 1, NA, life_sq))
test <- test %>% mutate(life_sq = ifelse(life_sq > 400 | life_sq <= 1, NA, life_sq))
## kitchen area
train <- train %>% mutate(kitch_sq = as.numeric(kitch_sq),kitch_sq = ifelse(kitch_sq > 200 | kitch_sq <= 1, NA, kitch_sq))
test <- test %>% mutate(kitch_sq = as.numeric(kitch_sq),kitch_sq = ifelse(kitch_sq > 200 | kitch_sq <= 1, NA, kitch_sq))
## num rooms
train <- train %>% mutate(num_room = as.numeric(num_room))
test <- test %>% mutate(num_room = as.numeric(num_room))
## build year
train <- train %>% mutate(build_year = as.numeric(build_year), build_year = ifelse(build_year > 2018 | build_year < 1860, NA, build_year))
test <- test %>% mutate(build_year = as.numeric(build_year), build_year = ifelse(build_year > 2018 | build_year < 1860, NA, build_year))
## floor
train <- train %>% mutate(floor = ifelse(floor > 45, NA, floor))
test <- test %>% mutate(floor = ifelse(floor > 45, NA, floor))
## max floor
train <- train %>% mutate(max_floor = as.numeric(max_floor),max_floor = ifelse(max_floor > 60 | max_floor <=1, NA, max_floor))
test <- test %>% mutate(max_floor = as.numeric(max_floor),max_floor = ifelse(max_floor > 60 | max_floor <=1, NA, max_floor))
## state
train <- train %>% mutate(state = as.numeric(state), state = ifelse(state > 4, NA, state))
test <- test %>% mutate(state = as.numeric(state), state = ifelse(state > 4, NA, state))
## material
train <- train %>% mutate(material = as.numeric(material), material = ifelse(material == 3, NA, material))
test <- test %>% mutate(material = as.numeric(material), material = ifelse(material == 3, NA, material))
## product type
train <- train %>% mutate(product_type = factor(product_type))
test <- test %>% mutate(product_type = factor(product_type))
##subarea
train <- train %>% mutate(sub_area = factor(sub_area))
test <- test %>% mutate(sub_area = factor(sub_area))
train$strange_990000 <- train$price_doc %in% c(990000)
train$strange_1000000 <- train$price_doc %in% c(1000000)
train$strange_2000000 <- train$price_doc %in% c(2000000)
train$strange_3000000 <- train$price_doc %in% c(3000000)
train$year_month <- make_date(year = year(train$timestamp), month=month(train$timestamp))
test$year_month <- make_date(year = year(test$timestamp), month=month(test$timestamp))
train_by_month <- train %>% group_by(year_month) %>% summarize(m99 = mean(strange_990000),m100=mean(strange_1000000),m200=mean(strange_2000000),m300=mean(strange_3000000),n=n())
train_by_month %>% filter(year_month > as.Date("2011-09-01")) %>%  ggplot(aes(x=year_month,y=m99))+geom_line()
# percentage of strange values in train set
perc_strange_train <- train %>% summarize(m99 = mean(strange_990000),m100=mean(strange_1000000),m200=mean(strange_2000000),m300=mean(strange_3000000),n=n())
# fit model and make predictions on test set
fit99 <- glm(strange_990000 ~ year_month,data=train)
fit100 <- glm(strange_1000000 ~ year_month,data=train)
fit200 <- glm(strange_2000000 ~ year_month,data=train)
fit300 <- glm(strange_3000000 ~ year_month,data=train)
# fit model and make predictions on test set
fit99 <- lm(m99 ~ year_month,data=train_by_month)
fit100 <- lm(m100 ~ year_month,data=train_by_month)
fit200 <- lm(m200 ~ year_month,data=train_by_month)
fit300 <- lm(m300 ~ year_month,data=train_by_month)
test$strange_990000 <- predict(fit99,test)
test$strange_1000000 <- predict(fit100,test)
test$strange_2000000 <- predict(fit200,test)
test$strange_3000000 <- predict(fit300,test)
tt <- test %>% select(strange_990000,strange_1000000,strange_2000000,strange_3000000,year_month)
test_by_month <- tt %>% group_by(year_month) %>% summarize(m99 = mean(strange_990000),m100=mean(strange_1000000),m200=mean(strange_2000000),m300=mean(strange_3000000),n=n(),ev99=m99*n,ev100=m100*n,ev200=m200*n,ev300=m300*n)
# percentage of strange values in train set
perc_strange_test <- colSums(test_by_month[7:10])/7662
samplecoeffs <- perc_strange_test/perc_strange_train
train <- train %>% mutate(t99 = as.numeric(strange_990000), t100=as.numeric(strange_1000000))
outcomes <- train$t100
train <- select(train, -price_doc, -strange_990000, -strange_1000000, -strange_2000000, -strange_3000000, -year_month, -timestamp, -t99, -t100,-product_type)
test
str(test)
test <- select(test,-strange_990000, -strange_1000000, -strange_2000000, -strange_3000000, -year_month, -timestamp)
dummy <- dummyVars(~.,train)
train_matrix <- predict(dummy,train)
train_matrix <- predict(dummy,train)
test_matrix <- predict(dummy,test)
train_sparse <- Matrix(train_matrix,sparse = T)
test_sparse <- Matrix(test_matrix,sparse = T)
dtrain <- xgb.DMatrix(data = train_sparse,label=outcomes)
dtest <- xgb.DMatrix(data=test_sparse)
weights <- vector(length=nrow(train))+0.005
weights[which(outcomes==1)] <- 1
dtrain <- xgb.DMatrix(data = train_sparse,label=outcomes, weight=weights)
dtest <- xgb.DMatrix(data=test_sparse)
param <- list(objective="binary:logistic",
eval_metric = "auc",
eta = .2,
gamma = 1,
max_depth = 4,
min_child_weight = 1,
subsample = .7,
colsample_bytree = .7
)
param <- list(objective="binary:logistic",
eval_metric = "auc",
eta = .2,
gamma = 1,
max_depth = 4,
min_child_weight = 1,
subsample = .7,
colsample_bytree = .7
)
xgb_cv <- xgb.cv(data = dtrain,
nfold = 5,
params = param,
nrounds = 150000,
maximize = TRUE,
prediction = TRUE,
print_every_n = 5,
early_stopping_round = 100,
weight = weights
);gc()
rounds <- xgb_cv$best_iteration
cat("XGB training")
xgb_model <- xgb.train(data = dtrain,
params = param,
watchlist = list(train = dtrain),
nrounds = rounds,
verbose = 1,
print.every.n = 5
);gc()
preds <- predict(xgb_model,dtest)
head(sort(preds,decreasing=T))
head(sort(preds,decreasing=T),200)
hist(preds)
preds <- predict(xgb_model,dtest)
head(sort(preds,decreasing=T),200)
hist(preds)
weights <- vector(length=nrow(train))+0.05
weights[which(outcomes==1)] <- 1
dtrain <- xgb.DMatrix(data = train_sparse,label=outcomes, weight=weights)
dtest <- xgb.DMatrix(data=test_sparse)
xgb_cv <- xgb.cv(data = dtrain,
nfold = 5,
params = param,
nrounds = 150000,
maximize = TRUE,
prediction = TRUE,
print_every_n = 5,
early_stopping_round = 100,
weight = weights
);gc()
rounds <- xgb_cv$best_iteration
cat("XGB training")
xgb_model <- xgb.train(data = dtrain,
params = param,
watchlist = list(train = dtrain),
nrounds = rounds,
verbose = 1,
print_every_n = 5
);gc()
preds <- predict(xgb_model,dtest)
head(sort(preds,decreasing=T),200)
hist(preds)
param <- list(objective="binary:logistic",
eval_metric = "auc",
eta = .2,
gamma = 1,
max_depth = 4,
subsample = .7,
colsample_bytree = .7
)
xgb_cv <- xgb.cv(data = dtrain,
nfold = 5,
params = param,
nrounds = 150000,
maximize = TRUE,
prediction = TRUE,
print_every_n = 5,
early_stopping_round = 100,
weight = weights
);gc()
rounds <- xgb_cv$best_iteration
cat("XGB training")
xgb_model <- xgb.train(data = dtrain,
params = param,
watchlist = list(train = dtrain),
nrounds = rounds,
verbose = 1,
print_every_n = 5
);gc()
preds <- predict(xgb_model,dtest)
head(sort(preds,decreasing=T),200)
hist(preds)
library(zoo)
library(dplyr)
library(xts)
library(lubridate)
library(dygraphs)
library(readr)
library(ggplot2)
#setwd("~/Desktop/Machine Learning/Kaggle/Sberbank")
#setwd("D:/Eigene Dateien/sonstiges/Kaggle/Sberbank")
train <- read_csv('./input/train.csv')
tmp <- hist(train$price_doc,200)
plotdf <- data.frame(bins=tmp$mids, counts=tmp$counts)
outliers <- mean(train$price_doc) + 10*sd(train$price_doc)
plotdf <- plotdf %>% filter(bins > outliers & counts >= 1)
cplot <- function(data, x, y, xlab=NULL, ylab = NULL){
require(grid)
require(gridExtra)
data[[x]] <- factor(data[[x]],exclude = NULL)
summ <- paste0('mean(', y, ',na.rm=T)')  # construct summary method, e.g. mean(mpg)
summ2 <- 'n()'
summ_names <- c(paste0('m'),paste0('n'))  # construct summary variable name, e.g. mean_mpg
meandat <- data %>% group_by_(.dots = x) %>% summarize_(.dots = setNames(list(summ,summ2),summ_names))
meandat[[x]] <- as.factor(meandat[[x]])
meandat$num <- as.numeric(meandat[[x]])
meandat$num <- meandat$num - 0.3
plotlims <- quantile(data[[y]],c(0.025,0.975))
p1 <- ggplot(data,aes_string(x = x, y = y,fill=x,color=x))+
geom_violin(size=1,alpha=0.1, width=1.1)+
geom_pointrange(stat="summary",fun.data="mean_se", size=1)+
geom_text(mapping=aes_string(x="num",y=plotlims[2],label="n"),data=meandat, hjust="center")+
scale_y_continuous(limits=plotlims)+
theme_bw()+
theme(legend.position="none",
axis.title.x = element_blank(),
axis.title.y = element_text(size=16),
axis.text.x = element_blank(),
axis.text.y = element_text(size=14),
axis.ticks.x = element_blank())
if (!is.null(xlab)) { p1 <- p1 + xlab(xlab)}
if (!is.null(ylab)) { p1 <- p1 + ylab(ylab)}
p2 <- ggplot(data,aes_string(x = x, y = y,fill=x,color=x))+
geom_errorbar(stat="summary",fun.data="mean_se", size=1, width=0.7)+
geom_point(stat="summary",fun.data="mean_se", size=4)+
geom_abline(data=meandat,mapping=aes_string(color=x,intercept=meandat$m,slope=0),linetype=2, alpha=0.5)+
theme_bw()+
theme(legend.position="none",
axis.title.x = element_text(size=16),
axis.title.y = element_text(size=16),
axis.text.x = element_text(size=14),
axis.text.y = element_text(size=14),
axis.ticks.x = element_blank(),
panel.grid = element_blank())
if (!is.null(xlab)) { p2 <- p2 + xlab(xlab)}
if (!is.null(ylab)) { p2 <- p2 + ylab(ylab)}
gA=ggplot_gtable(ggplot_build(p1))
gB=ggplot_gtable(ggplot_build(p2))
maxWidth = grid::unit.pmax(gA$widths, gB$widths)
gA$widths <- as.list(maxWidth)
gB$widths <- as.list(maxWidth)
grid.newpage()
grid.arrange(
arrangeGrob(gA,gB,nrow=2,heights=c(.6,.5))
)
}
ggplot(train)+geom_histogram(aes(x=price_doc),bins=1000, fill="darkblue")+geom_rug(aes(x=price_doc), colour="grey60")+theme_bw()+theme(axis.title = element_text(size=16),axis.text = element_text(size=14))+xlab("Price")+ylab("Count")
ggplot(train)+geom_histogram(aes(x=price_doc),bins=200, fill="grey60")+scale_x_continuous(limits=c(0,20000000))+theme_bw()+theme(axis.title = element_text(size=16),axis.text = element_text(size=14))+xlab("Price")+ylab("Count")+annotate("segment", x = 1500000, xend = 5000000, y = 900, yend = 900, colour="red", size=1.5, arrow=arrow(ends="first"))+
annotate("segment", x = 2500000, xend = 6000000, y = 750, yend = 750, colour="red", size=1.5, arrow=arrow(ends="first"))
train$logprice <- log(train$price_doc)
ggplot(train)+geom_histogram(aes(x=logprice),bins=200, fill="grey60")+theme_bw()+theme(axis.title = element_text(size=16),axis.text = element_text(size=14))+xlab("Log Price")+ylab("Count")
train$year <- make_date(year=year(train$timestamp))
ggplot(train,aes(x=year,y=price_doc))+geom_line(stat = "summary", color="red", size=1.5)+geom_errorbar(stat="summary", color="grey50", width=50)+geom_point(size=5, color="red", fill="white", shape = 21, stat="summary", stroke=1.5)+theme_bw()+theme(axis.title = element_text(size=16),axis.text = element_text(size=14),panel.grid.minor = element_blank())+xlab("Timestamp_peryear")+ylab("Price")
train$year_month <- make_date(year=year(train$timestamp),month=month(train$timestamp))
ggplot(train,aes(x=year_month,y=price_doc))+geom_line(stat = "summary", color="red", size=1.5)+geom_point(size=3, color="red", fill="white", shape = 21, stat="summary", stroke=1.5)+theme_bw()+theme(axis.title = element_text(size=16),axis.text = element_text(size=14))+xlab("Timestamp_monthperyear")+ylab("Price")
ggplot(train,aes(x=timestamp,y=price_doc))+geom_line(stat = "summary", color="red")+theme_bw()+theme(axis.title = element_text(size=16),axis.text = element_text(size=14))+xlab("Timestamp_day")+ylab("Price")+scale_y_continuous(limits=c(0,1.75e+07))
tmp <- train %>% group_by(timestamp) %>% summarize(m = mean(price_doc,na.rm=T)) %>% mutate(ma = rollapply(m,width = 20,FUN = mean, align = "right", fill = NA, na.rm = T))
xt <- xts(tmp$ma,tmp$timestamp)
names(xt)<-"Price"
dygraph(xt,xlab="Timestamp") %>%
dySeries("Price", strokeWidth = 3, color="red") %>%
dyAxis("y", label="Price", valueRange = c(5e+06, 9.5e+06)) %>%
dyRangeSelector(dateWindow = c("2014-01-01", "2015-01-01")) %>%
dyOptions(axisLineWidth = 1.5, fillGraph = TRUE, drawGrid = TRUE)
train$month <- as.numeric(month(train$timestamp))
ggplot(train,aes(x=month,y=price_doc))+geom_errorbar(stat="summary", color="grey40", width=0.4)+geom_line(stat = "summary", color="red", size=1.5)+geom_point(size=5, color="red", fill="white", shape = 21, stat="summary", stroke=1.5)+theme_bw()+theme(axis.title = element_text(size=16),axis.text = element_text(size=14), panel.grid.minor=element_blank())+xlab("Month")+ylab("Price")+scale_x_continuous(breaks = 1:12)
train %>% filter(year != "2012-01-01") %>%
ggplot(aes(x=month,y=price_doc))+geom_errorbar(stat="summary", color="grey40", width=0.4)+geom_line(stat = "summary", color="red", size=1.5)+geom_point(size=5, color="red", fill="white", shape = 21, stat="summary", stroke=1.5)+theme_bw()+theme(axis.title = element_text(size=16),axis.text = element_text(size=14), panel.grid.minor=element_blank())+xlab("Month")+ylab("Price")+scale_x_continuous(breaks = 1:12)
train$day <- as.numeric(day(train$timestamp))
ggplot(train,aes(x=day,y=price_doc))+geom_errorbar(stat="summary", color="grey60")+geom_line(stat = "summary", color="red", size=1.5)+geom_point(size=3, color="red", fill="white", shape = 21, stat="summary", stroke=1.5)+theme_classic()+theme(axis.title = element_text(size=16),axis.text = element_text(size=14),panel.grid.major.y = element_line(colour = "grey95"),panel.grid.minor.y = element_line(colour = "grey95"))+xlab("Day of month")+ylab("Price")+scale_x_continuous(breaks = seq(1,31,by=2))
ggplot(train)+geom_point(aes(x=full_sq,y=price_doc))+theme_bw()+theme(axis.title = element_text(size=16),axis.text = element_text(size=14))+xlab("Total Area (full_sq)")+ylab("Price")
ggplot(train)+geom_point(aes(x=full_sq,y=price_doc))+stat_smooth(aes(x=full_sq,y=price_doc),method="lm", color="red")+scale_x_continuous(limits=c(0,300))+theme_bw()+theme(axis.title = element_text(size=16),axis.text = element_text(size=14))+xlab("Total Area (full_sq)")+ylab("Price")
ggplot(train)+geom_point(aes(x=life_sq,y=price_doc))+theme_bw()+theme(axis.title = element_text(size=16),axis.text = element_text(size=14))+xlab("Living Area (life_sq)")+ylab("Price")
ggplot(train)+geom_point(aes(x=life_sq,y=price_doc))+stat_smooth(aes(x=life_sq,y=price_doc),color="red",method="lm")+scale_x_continuous(limits=c(0,300))+theme_bw()+theme(axis.title = element_text(size=16),axis.text = element_text(size=14))+xlab("Living Area (life_sq)")+ylab("Price")
train <- train %>% mutate(kitch_sq=as.numeric(kitch_sq))
train %>% ggplot(aes(kitch_sq,price_doc))+geom_point()+theme_bw()+theme(axis.title = element_text(size=16),axis.text = element_text(size=14))+xlab("Kitchen Area (kitch_sq)")+ylab("Price")
train %>% ggplot(aes(kitch_sq,price_doc))+geom_point()+stat_smooth(color="red",method="lm")+scale_x_continuous(limits=c(0,150))+theme_bw()+theme(axis.title = element_text(size=16),axis.text = element_text(size=14))+xlab("Living Area (life_sq)")+ylab("Price")
train$num_room <- as.numeric(train$num_room)
ggplot(train,aes(x=num_room,y=price_doc))+geom_errorbar(stat="summary", width=0.15)+geom_line(stat = "summary", color="red", size=1.5)+geom_point(size=5, color="red", fill="white", shape = 21, stat="summary", stroke=1.5)+theme_bw()+theme(axis.title = element_text(size=16),axis.text = element_text(size=14))+xlab("Number of living rooms (num_room)")+ylab("Price")
train$num_room <- as.numeric(train$num_room)
ggplot(train,aes(x=num_room,y=price_doc))+geom_errorbar(stat="summary", color="grey40", width=0.4)+geom_line(stat = "summary", color="red", size=1.5)+geom_point(size=5, color="red", fill="white", shape = 21, stat="summary", stroke=1.5)+theme_bw()+theme(axis.title = element_text(size=16),axis.text = element_text(size=14))+xlab("Number of living rooms (num_room)")+ylab("Price")+coord_cartesian(xlim=c(0,10))
train$by <- as.numeric(train$build_year)
train$by[train$by == 20052009] <- 2007
train$by[train$by == 4965] <- NaN
train$by[train$by == 215] <- 2015
tmp <- filter(train, by > 1000)
ggplot(tmp)+geom_point(aes(x=by,y=price_doc))+stat_smooth(aes(x=by,y=price_doc),color="red")+theme_bw()+theme(axis.title = element_text(size=16),axis.text = element_text(size=14))+scale_x_continuous(limits=c(1900,2015))+xlab("Build Year (build_year)")+ylab("Price")
tmp <- filter(train, by > 1950)
ggplot(tmp)+geom_bar(aes(x=by,y=price_doc),width=1,stat="summary", fun.y="mean",fill="grey60")+stat_smooth(aes(x=by,y=price_doc),color="red",se = T)+theme_bw()+theme(axis.title = element_text(size=16),axis.text = element_text(size=14))+scale_x_continuous(limits=c(1950,2015))+xlab("Build Year (build_year)")+ylab("Price")
train %>% mutate(bynew = ifelse(by<=1,by,"year")) %>% cplot("bynew","price_doc",xlab="Building year (build_year)",ylab="Price")
ggplot(train)+geom_point(aes(x=floor,y=price_doc))+stat_smooth(aes(x=floor,y=price_doc),color="red")+theme_bw()+theme(axis.title = element_text(size=16),axis.text = element_text(size=14))+xlab("Floor (floor)")+ylab("Price")
ggplot(train)+geom_bar(aes(x=floor,y=price_doc),stat="summary",fun.y="mean",fill="gray60")+stat_smooth(aes(x=floor,y=price_doc),color="red")+scale_x_continuous(limits=c(1,20))+scale_y_continuous(limits=c(0,2000000))+theme_bw()+theme(axis.title = element_text(size=16),axis.text = element_text(size=14))+xlab("Floor (floor)")+ylab("Price")
train <- train %>% mutate(max_floor = as.numeric(max_floor))
ggplot(train)+geom_bar(aes(x=max_floor,y=price_doc),stat="summary",fun.y="mean", fill="grey60")+stat_smooth(aes(x=floor,y=price_doc),color="red")+theme_bw()+theme(axis.title = element_text(size=16),axis.text = element_text(size=14))+xlab("Number of floors (max floor)")+ylab("Price")
train <- train %>% mutate(max_floor = as.numeric(max_floor))
ggplot(train)+geom_bar(aes(x=max_floor,y=price_doc),stat="summary",fun.y="mean", fill="grey60")+stat_smooth(aes(x=floor,y=price_doc), color="red")+theme_bw()+theme(axis.title = element_text(size=16),axis.text = element_text(size=14))+xlab("Number of floors (max floor)")+ylab("Price")+scale_x_continuous(limits=c(0,30))
train$flbymax <- as.numeric(train$floor) / as.numeric(train$max_floor)
ggplot(train)+stat_smooth(aes(x=flbymax,y=price_doc),color="red")+scale_x_continuous(limits=c(0,1))+
theme_bw()+theme(axis.title = element_text(size=16),axis.text = element_text(size=14))+xlab("Floor by Max Floor")+ylab("Price")
train$state <- as.numeric(train$state)
train$state[train$state==33] <- 3
train %>% cplot("state","price_doc", xlab="Appartment state (state)", ylab="Price")
train %>% filter(material != 3 | is.na(material)) %>% cplot("material","price_doc", xlab="Wall Material (material)", ylab="Price")
train %>% cplot("product_type","price_doc",xlab="Product Type (product_type)",ylab="Price")
train %>% mutate(material = as.factor(material)) %>% filter(material != 3 | is.na(material)) %>%
ggplot(aes(x=build_year))+geom_density(aes(fill=material,color=material),alpha=0.2)+ coord_cartesian(xlim=c(1950,2018))
train %>% mutate(material = as.numeric(material)) %>% filter(material != 3 | is.na(material)) %>%
ggplot(aes(x=build_year))+geom_density(aes(fill=material,color=material),alpha=0.2)+ coord_cartesian(xlim=c(1950,2018))
train %>% mutate(material = as.factor(material)) %>% filter(material != 3 | is.na(material)) %>%
ggplot(aes(x=build_year))+geom_density(aes(fill=material,color=material),alpha=0.2)
str(train$build_year)
train %>% mutate(build_year = as.numeric(build_year),material = as.factor(material)) %>% filter(material != 3 | is.na(material)) %>%
ggplot(aes(x=build_year))+geom_density(aes(fill=material,color=material),alpha=0.2)
train %>% mutate(build_year = as.numeric(build_year),material = as.factor(material)) %>% filter(material != 3 | is.na(material) & build_year < 2019) %>%
ggplot(aes(x=build_year))+geom_density(aes(fill=material,color=material),alpha=0.2)
train %>% mutate(build_year = as.numeric(build_year),material = as.factor(material)) %>% filter((material != 3 | is.na(material)) & build_year < 2019) %>%
ggplot(aes(x=build_year))+geom_density(aes(fill=material,color=material),alpha=0.2)
train %>% mutate(build_year = as.numeric(build_year),material = as.factor(material)) %>% filter((material != 3 | is.na(material)) & (build_year < 2019 & build_year > 0)) %>%
ggplot(aes(x=build_year))+geom_density(aes(fill=material,color=material),alpha=0.2)
+coord_cartesian(xlim=c(1950,2018))
train %>% mutate(build_year = as.numeric(build_year),material = as.factor(material)) %>% filter((material != 3 | is.na(material)) & (build_year < 2019 & build_year > 0)) %>%
ggplot(aes(x=build_year))+geom_density(aes(fill=material,color=material),alpha=0.2)+coord_cartesian(xlim=c(1950,2018))
train %>% mutate(build_year = as.numeric(build_year),material = as.factor(material)) %>% filter((material != 3 | is.na(material)) & (build_year < 2019 & build_year > 0)) %>%
ggplot(aes(x=build_year))+geom_density(aes(fill=material,color=material),alpha=0.2, size=1)+coord_cartesian(xlim=c(1950,2018))
?geom_density
train %>% mutate(build_year = as.numeric(build_year),material = as.factor(material)) %>% filter((material != 3 | is.na(material)) & (build_year < 2019 & build_year > 0)) %>%
ggplot(aes(x=build_year))+geom_density(aes(fill=material,color=material),alpha=0.2, size=1)+coord_cartesian(xlim=c(1950,2018))+theme_bw()
train %>% mutate(build_year = as.numeric(build_year),material = factor(material,exclude=NULL)) %>% filter((material != 3 | is.na(material)) & (build_year < 2019 & build_year > 0)) %>%
ggplot(aes(x=build_year))+geom_density(aes(fill=material,color=material),alpha=0.2, size=1)+coord_cartesian(xlim=c(1950,2018))+theme_bw()
factor(train$material,exclude=NULL)
train %>% mutate(build_year = as.numeric(build_year),material = factor(material,exclude=NULL)) %>% filter((material != 3 | is.na(material))
)
train %>% mutate(build_year = as.numeric(build_year)) %>% filter((material != 3 | is.na(material)) & (build_year < 2019 & build_year > 0)) %>%
ggplot(aes(x=build_year))+geom_density(aes(fill=material,color=material),alpha=0.2, size=1)+coord_cartesian(xlim=c(1950,2018))+theme_bw()
as.numeric(train$build_year)
hist(as.numeric(train$build_year))
train %>% mutate(build_year = as.numeric(build_year)) %>% filter((material != 3 | is.na(material)) & (build_year < 2019 & build_year > 0)) %>%
ggplot(aes(x=build_year))+geom_density(aes(fill=material,color=material),alpha=0.2, size=1)+coord_cartesian(xlim=c(1950,2018))+theme_bw()
train %>% mutate(build_year = as.numeric(build_year)) %>% filter((material != 3 | is.na(material)) & (build_year < 2019 & build_year > 0)) %>%
ggplot(aes(x=build_year))+geom_density(aes(fill=material,color=material),alpha=0.2, size=1)+coord_cartesian(xlim=c(1950,2018))+theme_bw()
train %>% mutate(build_year = as.numeric(build_year)) %>% filter((material != 3 | is.na(material)) & (build_year < 2019 & build_year > 0)) %>%
ggplot(aes(x=build_year))+geom_density(aes(fill=material,color=material),alpha=0.2, size=1)+coord_cartesian(xlim=c(1950,2018))+theme_bw()+theme(axis.title = element_text(size=16),axis.text = element_text(size=14))
str(train)
str(train$material)
cor(factor(train$material),train$price_doc)
lm(price_doc ~ factor(material),data=train)
summary(lm(price_doc ~ factor(material),data=train))
fit <- lm(price_doc ~ factor(material),data=train))
fit <- lm(price_doc ~ factor(material),data=train)
fit$coefficients
summary(fit)
summary(fit)$r.squared
sqrt(summary(fit)$r.squared)
train$wday <- as.numeric(wday(train$timestamp))
ggplot(train,aes(x=wday,y=price_doc))+geom_errorbar(stat="summary", color="grey60")+geom_line(stat = "summary", color="red", size=1.5)+geom_point(size=3, color="red", fill="white", shape = 21, stat="summary", stroke=1.5)+theme_classic()+theme(axis.title = element_text(size=16),axis.text = element_text(size=14),panel.grid.major.y = element_line(colour = "grey95"),panel.grid.minor.y = element_line(colour = "grey95"))+xlab("Day of month")+ylab("Price")+scale_x_continuous(breaks = seq(1,7,by=1))
train$wday
make_date(2017,5,11)
wday(make_date(2017,5,11))
train$wday <- as.numeric(wday(train$timestamp))
ggplot(train,aes(x=wday,y=price_doc))+
geom_errorbar(stat="summary", color="grey60", width=0.5)+
geom_line(stat = "summary", color="red", size=1.5)+
geom_point(size=3, color="red", fill="white", shape = 21, stat="summary", stroke=1.5)+
theme_classic()+theme(axis.title = element_text(size=16),axis.text = element_text(size=14),panel.grid.major.y = element_line(colour = "grey95"),panel.grid.minor.y = element_line(colour = "grey95"))+
xlab("Day of month")+ylab("Price")+
scale_x_continuous(breaks = seq(1,7,by=1))
levels(train$wday)
train$wday
train$wday <- wday(train$timestamp)
ggplot(train,aes(x=wday,y=price_doc))+
geom_errorbar(stat="summary", color="grey60", width=0.5)+
geom_line(stat = "summary", color="red", size=1.5)+
geom_point(size=3, color="red", fill="white", shape = 21, stat="summary", stroke=1.5)+
theme_classic()+theme(axis.title = element_text(size=16),axis.text = element_text(size=14),panel.grid.major.y = element_line(colour = "grey95"),panel.grid.minor.y = element_line(colour = "grey95"))+
xlab("Day of month")+ylab("Price")+
scale_x_continuous(breaks = seq(1,7,by=1))
train$wday <- wday(train$timestamp)
ggplot(train,aes(x=wday,y=price_doc))+
geom_errorbar(stat="summary", color="grey60", width=0.5)+
geom_line(stat = "summary", color="red", size=1.5)+
geom_point(size=3, color="red", fill="white", shape = 21, stat="summary", stroke=1.5)+
theme_classic()+theme(axis.title = element_text(size=16),axis.text = element_text(size=14),panel.grid.major.y = element_line(colour = "grey95"),panel.grid.minor.y = element_line(colour = "grey95"))+
xlab("Day of week")+ylab("Price")+
scale_x_continuous(breaks = seq(1,7,by=1))
str(train$wday)
train %>% mutate(build_year = as.numeric(build_year)) %>% filter((material != 3 | is.na(material)) & (build_year < 2019 & build_year > 0)) %>%
ggplot(aes(x=build_year))+geom_density(aes(fill=material,color=material),alpha=0.2, size=1)+coord_cartesian(xlim=c(1950,2018))+theme_bw()+theme(axis.title = element_text(size=16),axis.text = element_text(size=14))
train %>% mutate(build_year = as.numeric(build_year)) %>% filter((material != 3 | is.na(material)) & (build_year < 2019 & build_year > 0)) %>%
ggplot(aes(x=build_year))+geom_bar(position="fill")
train %>% mutate(build_year = as.numeric(build_year)) %>% filter((material != 3 | is.na(material)) & (build_year < 2019 & build_year > 1950)) %>%
ggplot(aes(x=build_year))+geom_bar(position="fill")
train %>% mutate(build_year = as.numeric(build_year)) %>% filter((material != 3 | is.na(material)) & (build_year < 2019 & build_year > 1950)) %>%
ggplot(aes(x=build_year,fill=material))+geom_bar(position="fill")
train %>% mutate(build_year = as.numeric(build_year)) %>% filter((material != 3 | is.na(material)) & (build_year < 2019 & build_year > 2000)) %>%
ggplot(aes(x=build_year,fill=material))+geom_bar(position="fill")
train %>% mutate(build_year = as.numeric(build_year)) %>% filter((material != 3 | is.na(material)) & (build_year < 2019 & build_year > 2000)) %>%
ggplot(aes(x=build_year,fill=material))+geom_bar(position="fill",width=1)
train %>% mutate(build_year = as.numeric(build_year)) %>% filter((material != 3 | is.na(material)) & (build_year < 2019 & build_year > 1950)) %>%
ggplot(aes(x=build_year,fill=material))+geom_bar(position="fill",width=1)
train %>% mutate(build_year = as.numeric(build_year)) %>% filter((material != 3 | is.na(material)) & (build_year < 2019 & build_year > 1950)) %>%
ggplot(aes(x=build_year,fill=material))+geom_bar(position="fill",width=1)+theme_bw()+theme(axis.title = element_text(size=16),axis.text = element_text(size=14))
train %>% mutate(build_year = as.numeric(build_year)) %>% filter((material != 3 | is.na(material)) & (build_year < 2019 & build_year > 1950)) %>%
ggplot(aes(x=build_year,fill=material))+geom_bar(position="fill",width=1, alpha=0.6)+theme_bw()+theme(axis.title = element_text(size=16),axis.text = element_text(size=14))
train %>% mutate(build_year = as.numeric(build_year)) %>% filter((material != 3 | is.na(material)) & (build_year < 2019 & build_year > 1950)) %>%
ggplot(aes(x=build_year,fill=material))+geom_bar(position="fill",width=1)+theme_bw()+theme(axis.title = element_text(size=16),axis.text = element_text(size=14))
setwd("C:/Users/LocalAdmin/Desktop/Eigene Dateien/sonstiges/Kaggle/Sberbank/Git/sberbank")
