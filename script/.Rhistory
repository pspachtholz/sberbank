test <- test %>% mutate(hospital_beds_raion_pct = hospital_beds_raion/raion_popul)
train <- train %>% mutate(healthcare_centers_raion_pct = healthcare_centers_raion/area_m*1e+06)
test <- test %>% mutate(healthcare_centers_raion_pct = healthcare_centers_raion/area_m*1e+06)
train <- train %>% mutate(university_top_20_raion = ifelse(university_top_20_raion>=1,1,0))
test <- test %>% mutate(university_top_20_raion = ifelse(university_top_20_raion>=1,1,0))
train <- train %>% mutate(sport_objects_raion_pct = sport_objects_raion/area_m*1e+06)
test <- test %>% mutate(sport_objects_raion_pct = sport_objects_raion/area_m*1e+06)
train <- train %>% mutate(additional_education_raion_pct = additional_education_raion/area_m*1e+06)
test <- test %>% mutate(additional_education_raion_pct = additional_education_raion/area_m*1e+06)
train <- train %>% mutate(culture_objects_top_25 = NULL, culture_objects_top_25_raion = ifelse(culture_objects_top_25_raion >=2, 2, ifelse(culture_objects_top_25_raion>=1,1,0)))
test <- test %>% mutate(culture_objects_top_25 = NULL, culture_objects_top_25_raion = ifelse(culture_objects_top_25_raion >=2, 2, ifelse(culture_objects_top_25_raion>=1,1,0)))
train <- train %>% mutate(shopping_centers_raion_pct = shopping_centers_raion/area_m*1e+06)
test <- test %>% mutate(shopping_centers_raion_pct = shopping_centers_raion/area_m*1e+06)
train <- train %>% mutate(office_raion = office_raion/area_m*1e+06)
test <- test %>% mutate(office_raion = office_raion/area_m*1e+06)
train <- train %>% mutate(thermal_power_plant_raion = as.numeric(as.factor(thermal_power_plant_raion)))
test <- test %>% mutate(thermal_power_plant_raion = as.numeric(as.factor(thermal_power_plant_raion)))
train <- train %>% mutate(incineration_raion = as.numeric(as.factor(incineration_raion)))
test <- test %>% mutate(incineration_raion = as.numeric(as.factor(incineration_raion)))
train <- train %>% mutate(oil_chemistry_raion = as.numeric(as.factor(oil_chemistry_raion)))
test <- test %>% mutate(oil_chemistry_raion = as.numeric(as.factor(oil_chemistry_raion)))
train <- train %>% mutate(radiation_raion = as.numeric(as.factor(radiation_raion)))
test <- test %>% mutate(radiation_raion = as.numeric(as.factor(radiation_raion)))
train <- train %>% mutate(railroad_terminal_raion = as.numeric(as.factor(railroad_terminal_raion)))
test <- test %>% mutate(railroad_terminal_raion = as.numeric(as.factor(railroad_terminal_raion)))
train <- train %>% mutate(big_market_raion = as.numeric(as.factor(big_market_raion)))
test <- test %>% mutate(big_market_raion = as.numeric(as.factor(big_market_raion)))
train <- train %>% mutate(nuclear_reactor_raion = as.numeric(as.factor(nuclear_reactor_raion)))
test <- test %>% mutate(nuclear_reactor_raion = as.numeric(as.factor(nuclear_reactor_raion)))
train <- train %>% mutate(detention_facility_raion = as.numeric(as.factor(detention_facility_raion)))
test <- test %>% mutate(detention_facility_raion = as.numeric(as.factor(detention_facility_raion)))
names(train) <- str_replace_all(names(train),"^[0-9]","a_")
names(train) <- str_replace_all(names(train),"-","_")
names(test) <- str_replace_all(names(test),"^[0-9]","a_")
names(test) <- str_replace_all(names(test),"-","_")
train <- train %>% mutate_if(is.numeric,as.double)
test <- test %>% mutate_if(is.numeric,as.double)
train <- train %>% mutate(train_test = "train")
test <- test %>% mutate(train_test = "test")
full <- bind_rows(train,test)
full %>% ggplot(aes(x=full_sq)) + geom_line(stat="density", aes(color=train_test),size=1.2, trim=T)+geom_rug()+facet_grid(product_type~.)+coord_cartesian(xlim=c(10,200))
full %>% ggplot(aes(x=life_sq)) + stat_density(geom="line", aes(group=train_test,color=train_test),size=1.2,na.rm=T, trim=T)+facet_grid(product_type~.)+coord_cartesian(xlim=c(0,100))
full %>% ggplot(aes(x=kitch_sq)) + stat_density(geom="line", aes(group=train_test,color=train_test),size=1.2,na.rm=T, trim=T)+facet_grid(product_type~.)+coord_cartesian(xlim=c(0,25))
# year
train <- train %>%
mutate(year = year(timestamp))
test <- test %>%
mutate(year = year(timestamp))
# year_month
train <- train %>%
mutate(year_month = make_date(year(timestamp),month(timestamp)))
test <- test %>%
mutate(year_month = make_date(year(timestamp),month(timestamp)))
# month of year
train <- train %>% mutate(month_of_year = month(timestamp))
test <- test %>% mutate(month_of_year = month(timestamp))
# week of year
train <- train %>% mutate(week_of_year = week(timestamp))
test <- test %>% mutate(week_of_year = week(timestamp))
# day of month
train <- train %>% mutate(day_of_month = mday(timestamp))
test <- test %>% mutate(day_of_month = mday(timestamp))
# weekday
train <- train %>% mutate(day_of_week = wday(timestamp))
test <- test %>% mutate(day_of_week = wday(timestamp))
# number of floors to the top of house
train <- train %>% mutate(floor_from_top = max_floor - floor)
test <- test %>% mutate(floor_from_top = max_floor - floor)
# relative position of floor in house
train <- train %>% mutate(floor_by_maxfloor = floor/max_floor)
test <- test %>% mutate(floor_by_maxfloor = floor/max_floor)
# average room size
train <- train %>% mutate(roomsize = (life_sq-kitch_sq)/num_room)
test <- test %>% mutate(roomsize = (life_sq-kitch_sq)/num_room)
# relative proportion of living area
train <- train %>% mutate(life_proportion = life_sq/full_sq)
test <- test %>% mutate(life_proportion = life_sq/full_sq)
# relative proportion of kitchen area
train <- train %>% mutate(kitchen_proportion = kitch_sq/full_sq)
test <- test %>% mutate(kitchen_proportion = kitch_sq/full_sq)
# extra area
train <- train %>% mutate(extra_area = full_sq - life_sq)
test <- test %>% mutate(extra_area = full_sq - life_sq)
# age of house at time of sale
train <- train %>% mutate(age_at_sale = interval(make_date(year=build_year),timestamp) / years(1))
test <- test %>% mutate(age_at_sale = interval(make_date(year=build_year),timestamp) / years(1))
# assign a common name to them
train <- train %>% mutate(appartment_name = factor(str_c(sub_area,format(metro_km_avto,digits=3))))
test <- test %>% mutate(appartment_name = factor(str_c(sub_area,format(metro_km_avto,digits=3))))
# get the number of appartments in group
train <- train %>%
group_by(appartment_name) %>%
tally() %>%
right_join(train,by="appartment_name")
test <- test %>%
group_by(appartment_name) %>%
tally() %>%
right_join(test,by="appartment_name")
# number of sales per year_month
train <- train %>%
group_by(year_month) %>%
summarize(n_sales_permonth = n()) %>%
right_join(train,by="year_month")
test <- test %>%
group_by(year_month) %>%
summarize(n_sales_permonth = n()) %>%
right_join(test,by="year_month")
# Longitude and Latitude
shp <- readOGR(dsn = "../input/administrative-divisions-of-moscow", layer = "moscow_adm")
# Longitude and Latitude
shp <- readOGR(dsn = "../input/administrative-divisions-of-moscow", layer = "moscow_adm")
centroids <- coordinates(shp)
sub_area <- shp$RAION
okrug <- shp$OKRUGS
location_data <- data.frame(sub_area = sub_area, okrug = okrug, longitude=centroids[,1], latitude=centroids[,2])
train <- train %>%
left_join(location_data,by="sub_area")
test <- test %>%
left_join(location_data,by="sub_area")
# Calculate distance and angle from Kremlin for each sub_area
kremlin = data.frame(longitude = 37.617664,latitude = 55.752121)
train <- train %>%
group_by(sub_area) %>%
top_n(n = 1, wt=id) %>%
ungroup %>%
mutate(distance_from_kremlin = distm(.[c("longitude","latitude")], kremlin, fun=distHaversine), angle_from_kremlin = bearing(.[c("longitude","latitude")], kremlin)) %>%
select(sub_area, distance_from_kremlin, angle_from_kremlin) %>%
right_join(train, by="sub_area")
train <- train %>% mutate(bearing.x = cos(pi/180*angle_from_kremlin), bearing.y = sin(pi/180*angle_from_kremlin), bearing.xy = bearing.x*bearing.y)
test <- test %>%
group_by(sub_area) %>%
top_n(n = 1, wt=id) %>%
ungroup %>%
mutate(distance_from_kremlin = distm(.[c("longitude","latitude")], kremlin, fun=distHaversine), angle_from_kremlin = bearing(.[c("longitude","latitude")], kremlin)) %>%
select(sub_area, distance_from_kremlin, angle_from_kremlin) %>%
right_join(test, by="sub_area")
test <- test %>% mutate(bearing.x = cos(pi/180*angle_from_kremlin), bearing.y = sin(pi/180*angle_from_kremlin), bearing.xy = bearing.x*bearing.y)
# average price per raion
train <- train %>%
group_by(sub_area) %>%
summarize(mean_price_raion = mean(price_doc)) %>%
right_join(train,by="sub_area")
# average price per raion per year
train <- train %>%
group_by(sub_area, year) %>%
summarize(mean_price_raion_year = mean(price_doc)) %>%
right_join(train,by=c("sub_area","year"))
# average price per sqm per raion
train <- train %>%
group_by(sub_area) %>%
summarize(mean_price_persqm_raion = mean(price_doc/full_sq, na.rm=T)) %>%
right_join(train,by="sub_area")
# average price rank per raion
train <- train %>% group_by(sub_area) %>% mutate(price_rank_raion = rank(mean_price_raion))
test <- train %>% group_by(sub_area) %>% summarize(price_rank_raion = mean(price_rank_raion)) %>% select(sub_area,price_rank_raion) %>% right_join(test, by="sub_area")
# population density per raion (i.e. Number of people per square meter)
train <- train %>% mutate(pop_density_raion = raion_popul/area_m)
test <- test %>% mutate(pop_density_raion = raion_popul/area_m)
# Demographic structure of the raions
train <- train %>% mutate(young_proportion = young_all/full_all) # proportion of people younger than working age
test <- test %>% mutate(young_proportion = young_all/full_all) # proportion of people younger than working age
train <- train %>% mutate(work_proportion = work_all/full_all) # proportion of people in working age
test <- test %>% mutate(work_proportion = work_all/full_all) # proportion of people in working age
train <- train %>% mutate(retire_proportion = ekder_all/full_all) # proportion of people older than working age
test <- test %>% mutate(retire_proportion = ekder_all/full_all) # proportion of people older than working age
# average building height per raion
train <- full %>%
group_by(sub_area) %>%
summarize(mean_building_height = mean(max_floor,na.rm=T)) %>%
right_join(train,by="sub_area")
test <- full %>%
group_by(sub_area) %>%
summarize(mean_building_height = mean(max_floor,na.rm=T)) %>%
right_join(test,by="sub_area")
# Proportion of houses with certain build materials (e.g. 10% build_count_wood)
train<-train %>%  mutate_each(funs(pct = (.)/raion_build_count_with_builddate_info),matches('^build_count_[a-zA-Z]*$'))
test<-test %>%  mutate_each(funs(pct = (.)/raion_build_count_with_builddate_info),matches('^build_count_[a-zA-Z]*$'))
# ratio of number of pupils and preschool seats
train <- train %>% mutate(ratio_preschool = children_preschool / preschool_quota)
test <- test %>% mutate(ratio_preschool = children_preschool / preschool_quota)
# ratio of number of pupils and school seats
train <- train %>% mutate(ratio_school = children_school / school_quota)
test <- test %>% mutate(ratio_school = children_school / school_quota)
outcomes <- train %>% filter(strange_price == 0) %>% select(price_doc) %>% .[[1]]
#outcomes <- train %>% select(price_doc) %>% .[[1]]
basic_features <- c("full_sq", "life_sq", "kitch_sq", "num_room", "floor", "max_floor", "material", "build_year", "state", "product_type")
#basic_features <- setdiff(names(train),c("id","timestamp","year","year_month","appartment_name","mean_price_persqm_raion","mean_price_raion_year","mean_price_raion","price_rank_raion","sub_area","price_doc"))
new_features <- c("month_of_year","week_of_year", "day_of_month", "day_of_week", "floor_from_top", "floor_by_maxfloor", "roomsize", "life_proportion", "kitchen_proportion", "extra_area", "age_at_sale", "n_sales_permonth", "distance_from_kremlin", "young_proportion", "work_proportion", "retire_proportion", "mean_building_height", "ratio_preschool",
"ratio_school", "count_na_perrow", "angle_from_kremlin", "bearing.x", "bearing.y", "bearing.xy", "pop_density_raion", "school_education_centers_raion_pct", "hospital_beds_raion_pct", "healthcare_centers_raion_pct", "sport_objects_raion_pct", "additional_education_raion_pct", "shopping_centers_raion_pct")
#predictors <- c(basic_features,new_features)
predictors <- basic_features
train_set <- train %>% filter(strange_price == 0) %>% select(one_of(predictors))
#  train_set <- train %>% select(one_of(predictors))
test_set <- test %>% select(one_of(predictors))
dummy <- dummyVars(~.,train_set)
train_matrix <- predict(dummy,train_set)
test_matrix <- predict(dummy,test_set)
train_sparse <- Matrix(train_matrix,sparse = T)
test_sparse <- Matrix(test_matrix, sparse=T)
dtrain <- xgb.DMatrix(data = train_sparse,label=log(outcomes))
dtest <- xgb.DMatrix(data = test_sparse)
#### xgboost params
param <- list(objective="reg:linear",
eval_metric = "rmse",
eta = .5,
max_depth = 5,
subsample = 1,
colsample_bytree = .7
)
# CV for number of rounds
xgb_cv <- xgb.cv(data = dtrain,
nfold = 5,
params = param,
nrounds = 150000,
maximize = FALSE,
prediction = TRUE,
early.stop.round = 50,
print_every_n = 50,
verbose = 1
)
rounds <- xgb_cv$best_iteration
# Train model
xgb_model <- xgb.train(data = dtrain,
params = param,
watchlist = list(train = dtrain),
nrounds = rounds,
verbose = 0
)
imp_matrix_all <- xgb.importance(colnames(train_sparse),xgb_model)
#predictors <- c(basic_features,new_features)
predictors <- basic_features
train_set <- train %>% filter(strange_price == 0) %>% select(one_of(predictors))
#  train_set <- train %>% select(one_of(predictors))
test_set <- test %>% select(one_of(predictors))
dummy <- dummyVars(~.,train_set)
train_matrix <- predict(dummy,train_set)
test_matrix <- predict(dummy,test_set)
train_sparse <- Matrix(train_matrix,sparse = T)
test_sparse <- Matrix(test_matrix, sparse=T)
dtrain <- xgb.DMatrix(data = train_sparse,label=log(outcomes))
dtest <- xgb.DMatrix(data = test_sparse)
#### xgboost params
param <- list(objective="reg:linear",
eval_metric = "rmse",
eta = .05,
max_depth = 5,
subsample = 1,
colsample_bytree = .7
)
# CV for number of rounds
xgb_cv <- xgb.cv(data = dtrain,
nfold = 5,
params = param,
nrounds = 150000,
maximize = FALSE,
prediction = TRUE,
early.stop.round = 50,
print_every_n = 50,
verbose = 1
)
rounds <- xgb_cv$best_iteration
# Train model
xgb_model <- xgb.train(data = dtrain,
params = param,
watchlist = list(train = dtrain),
nrounds = rounds,
verbose = 0
)
imp_matrix_all <- xgb.importance(colnames(train_sparse),xgb_model)
imp_matrix_all <- imp_matrix_all %>% mutate(group = ifelse(Feature %in% new_features,"new","old"))
ggplot(imp_matrix_all,aes(x=reorder(Feature,Gain),y=Gain, fill=group))+geom_bar(stat="identity")+coord_flip(ylim=c(0,0.2))+theme_bw()+labs(x="")
basic_features <- c("full_sq", "life_sq", "kitch_sq", "num_room", "floor", "max_floor", "material", "build_year", "state", "product_type", "price_rank_raion")
predictors <- basic_features
train_set <- train %>% filter(strange_price == 0) %>% select(one_of(predictors))
test_set <- test %>% select(one_of(predictors))
dummy <- dummyVars(~.,train_set)
train_matrix <- predict(dummy,train_set)
train_sparse <- Matrix(train_matrix,sparse = T)
test_sparse <- Matrix(test_matrix, sparse=T)
dtrain <- xgb.DMatrix(data = train_sparse,label=log(outcomes))
dtest <- xgb.DMatrix(data = test_sparse)
param <- list(objective="reg:linear",
eval_metric = "rmse",
eta = .05,
max_depth = 5,
subsample = 1,
colsample_bytree = .7
)
xgb_cv <- xgb.cv(data = dtrain,
nfold = 5,
params = param,
nrounds = 150000,
maximize = FALSE,
prediction = TRUE,
early.stop.round = 50,
print_every_n = 50,
verbose = 1
)
param <- list(objective="reg:linear",
eval_metric = "rmse",
eta = .1,
max_depth = 5,
subsample = 1,
colsample_bytree = .7
)
xgb_cv <- xgb.cv(data = dtrain,
nfold = 5,
params = param,
nrounds = 150000,
maximize = FALSE,
prediction = TRUE,
early.stop.round = 50,
print_every_n = 50,
verbose = 1
)
xgb_cv <- xgb.cv(data = dtrain,
nfold = 5,
params = param,
nrounds = 150000,
maximize = FALSE,
prediction = TRUE,
early.stop.round = 50,
print_every_n = 50,
verbose = 1
)
rounds <- xgb_cv$best_iteration
basic_features <- c("full_sq", "life_sq", "kitch_sq", "num_room", "floor", "max_floor", "material", "build_year", "state", "product_type", "mean_price_raion")
#predictors <- c(basic_features,new_features)
predictors <- basic_features
train_set <- train %>% filter(strange_price == 0) %>% select(one_of(predictors))
#  train_set <- train %>% select(one_of(predictors))
test_set <- test %>% select(one_of(predictors))
dummy <- dummyVars(~.,train_set)
train_matrix <- predict(dummy,train_set)
test_matrix <- predict(dummy,test_set)
train_sparse <- Matrix(train_matrix,sparse = T)
dtrain <- xgb.DMatrix(data = train_sparse,label=log(outcomes))
param <- list(objective="reg:linear",
eval_metric = "rmse",
eta = .1,
max_depth = 5,
subsample = 1,
colsample_bytree = .7
)
xgb_cv <- xgb.cv(data = dtrain,
nfold = 5,
params = param,
nrounds = 150000,
maximize = FALSE,
prediction = TRUE,
early.stop.round = 50,
print_every_n = 50,
verbose = 1
)
basic_features <- c("full_sq", "life_sq", "kitch_sq", "num_room", "floor", "max_floor", "material", "build_year", "state", "product_type", "mean_price_raion", "mean_price_raion_year")
#predictors <- c(basic_features,new_features)
predictors <- basic_features
train_set <- train %>% filter(strange_price == 0) %>% select(one_of(predictors))
#  train_set <- train %>% select(one_of(predictors))
test_set <- test %>% select(one_of(predictors))
dummy <- dummyVars(~.,train_set)
train_matrix <- predict(dummy,train_set)
test_matrix <- predict(dummy,test_set)
train_sparse <- Matrix(train_matrix,sparse = T)
dtrain <- xgb.DMatrix(data = train_sparse,label=log(outcomes))
param <- list(objective="reg:linear",
eval_metric = "rmse",
eta = .1,
max_depth = 5,
subsample = 1,
colsample_bytree = .7
)
xgb_cv <- xgb.cv(data = dtrain,
nfold = 5,
params = param,
nrounds = 150000,
maximize = FALSE,
prediction = TRUE,
early.stop.round = 50,
print_every_n = 50,
verbose = 1
)
imp_matrix_all <- imp_matrix_all %>% mutate(group = ifelse(Feature %in% new_features,"new","old"))
ggplot(imp_matrix_all,aes(x=reorder(Feature,Gain),y=Gain, fill=group))+geom_bar(stat="identity")+coord_flip(ylim=c(0,0.2))+theme_bw()+labs(x="")
imp_matrix_all
str(train_set)
colnames(train_matrix)
basic_features <- c("full_sq", "life_sq", "kitch_sq", "num_room", "floor", "max_floor", "material", "build_year", "state", "product_type", "price_rank_raion")
predictors <- basic_features
dummy <- dummyVars(~.,train_set)
train_matrix <- predict(dummy,train_set)
train_sparse <- Matrix(train_matrix,sparse = T)
dtrain <- xgb.DMatrix(data = train_sparse,label=log(outcomes))
param <- list(objective="reg:linear",
eval_metric = "rmse",
eta = .1,
max_depth = 5,
subsample = 1,
colsample_bytree = .7
)
xgb_cv <- xgb.cv(data = dtrain,
nfold = 5,
params = param,
nrounds = 150000,
maximize = FALSE,
prediction = TRUE,
early.stop.round = 50,
print_every_n = 50,
verbose = 1
)
xgb_cv <- xgb.cv(data = dtrain,
nfold = 5,
params = param,
nrounds = 150000,
maximize = FALSE,
prediction = TRUE,
early.stop.round = 50,
print_every_n = 50,
verbose = 1
)
rounds <- xgb_cv$best_iteration
xgb_model <- xgb.train(data = dtrain,
params = param,
watchlist = list(train = dtrain),
nrounds = rounds,
verbose = 0
)
imp_matrix_all <- xgb.importance(colnames(train_sparse),xgb_model)
imp_matrix_all <- imp_matrix_all %>% mutate(group = ifelse(Feature %in% new_features,"new","old"))
ggplot(imp_matrix_all,aes(x=reorder(Feature,Gain),y=Gain, fill=group))+geom_bar(stat="identity")+coord_flip(ylim=c(0,0.2))+theme_bw()+labs(x="")
colnames(train_sparse)
colnames(train_matrix)
train_set <- train %>% filter(strange_price == 0) %>% select(one_of(predictors))
dummy <- dummyVars(~.,train_set)
train_matrix <- predict(dummy,train_set)
colnames(train_matrix)
train_sparse <- Matrix(train_matrix,sparse = T)
dtrain <- xgb.DMatrix(data = train_sparse,label=log(outcomes))
param <- list(objective="reg:linear",
eval_metric = "rmse",
eta = .1,
max_depth = 5,
subsample = 1,
colsample_bytree = .7
)
xgb_cv <- xgb.cv(data = dtrain,
nfold = 5,
params = param,
nrounds = 150000,
maximize = FALSE,
prediction = TRUE,
early.stop.round = 50,
print_every_n = 50,
verbose = 1
)
xgb_model <- xgb.train(data = dtrain,
params = param,
watchlist = list(train = dtrain),
nrounds = rounds,
verbose = 0
)
xgb_model <- xgb.train(data = dtrain,
params = param,
watchlist = list(train = dtrain),
nrounds = rounds,
verbose = 0
)
imp_matrix_all <- xgb.importance(colnames(train_sparse),xgb_model)
imp_matrix_all <- imp_matrix_all %>% mutate(group = ifelse(Feature %in% new_features,"new","old"))
ggplot(imp_matrix_all,aes(x=reorder(Feature,Gain),y=Gain, fill=group))+geom_bar(stat="identity")+coord_flip(ylim=c(0,0.2))+theme_bw()+labs(x="")
predictors <- c(basic_features,new_features)
#predictors <- basic_features
train_set <- train %>% filter(strange_price == 0) %>% select(one_of(predictors))
#  train_set <- train %>% select(one_of(predictors))
test_set <- test %>% select(one_of(predictors))
dummy <- dummyVars(~.,train_set)
train_matrix <- predict(dummy,train_set)
test_matrix <- predict(dummy,test_set)
train_sparse <- Matrix(train_matrix,sparse = T)
test_sparse <- Matrix(test_matrix, sparse=T)
dtrain <- xgb.DMatrix(data = train_sparse,label=log(outcomes))
dtest <- xgb.DMatrix(data = test_sparse)
#### xgboost params
param <- list(objective="reg:linear",
eval_metric = "rmse",
eta = .1,
max_depth = 5,
subsample = 1,
colsample_bytree = .7
)
# CV for number of rounds
xgb_cv <- xgb.cv(data = dtrain,
nfold = 5,
params = param,
nrounds = 150000,
maximize = FALSE,
prediction = TRUE,
early.stop.round = 50,
print_every_n = 50,
verbose = 1
)
rounds <- xgb_cv$best_iteration
# Train model
xgb_model <- xgb.train(data = dtrain,
params = param,
watchlist = list(train = dtrain),
nrounds = rounds,
verbose = 0
)
imp_matrix_all <- xgb.importance(colnames(train_sparse),xgb_model)
imp_matrix_all <- imp_matrix_all %>% mutate(group = ifelse(Feature %in% new_features,"new","old"))
ggplot(imp_matrix_all,aes(x=reorder(Feature,Gain),y=Gain, fill=group))+geom_bar(stat="identity")+coord_flip(ylim=c(0,0.2))+theme_bw()+labs(x="")
